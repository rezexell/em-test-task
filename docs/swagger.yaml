basePath: /
definitions:
  model.Subscription:
    description: Subscription information
    properties:
      end_date:
        type: string
      id:
        type: string
      monthly_cost:
        type: integer
      service_name:
        maxLength: 255
        minLength: 2
        type: string
      start_date:
        type: string
      user_id:
        type: string
    required:
    - monthly_cost
    - service_name
    - start_date
    - user_id
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample API for managing subscriptions
  title: Subscriptions API
  version: "1.0"
paths:
  /sub:
    get:
      description: Возвращает список всех подписок
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Subscription'
            type: array
        "500":
          description: 'Пример: {\"error\": \"failed to fetch subscriptions\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить все подписки
      tags:
      - subscriptions
    post:
      consumes:
      - application/json
      description: Создает новую подписочную запись
      parameters:
      - description: Данные подписки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Пример: {\"error\": \"invalid UUID format\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Пример: {\"error\": \"database connection failed\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать новую подписку
      tags:
      - subscriptions
    put:
      consumes:
      - application/json
      description: Обновляет данные подписки по ID
      parameters:
      - description: Обновленные данные подписки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Subscription'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Пример: {\"error\": \"start_date: required field\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Пример: {\"error\": \"subscription not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить существующую подписку
      tags:
      - subscriptions
  /sub/{id}:
    delete:
      description: Удаляет подписку по ID
      parameters:
      - description: ID подписки (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'Пример: {\"error\": \"invalid id format\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Пример: {\"error\": \"delete operation failed\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить подписку
      tags:
      - subscriptions
    get:
      description: Возвращает подписку по её идентификатору
      parameters:
      - description: ID подписки (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subscription'
        "400":
          description: 'Пример: {\"error\": \"invalid UUID format\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'Пример: {\"error\": \"subscription not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Пример: {\"error\": \"database query failed\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить подписку по ID
      tags:
      - subscriptions
  /sub/filter:
    get:
      description: Возвращает подписки по фильтрам
      parameters:
      - description: ID пользователя (UUID)
        in: query
        name: user_id
        type: string
      - description: Название сервиса
        in: query
        name: service_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Subscription'
            type: array
        "400":
          description: 'Пример: {\"error\": \"invalid user_id format\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Пример: {\"error\": \"filtering failed\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Фильтрация подписок
      tags:
      - subscriptions
  /sub/total-cost:
    get:
      description: Рассчитывает общую стоимость подписок за период
      parameters:
      - description: ID пользователя (UUID)
        in: query
        name: user_id
        type: string
      - description: Название сервиса
        in: query
        name: service_name
        type: string
      - description: Начало периода (MM/YYYY)
        example: 01/2023
        in: query
        name: start_period
        required: true
        type: string
      - description: Конец периода (MM/YYYY)
        example: 12/2023
        in: query
        name: end_period
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Пример: {\"total_cost\": 150}'
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: 'Пример: {\"error\": \"invalid end_period format, use MM/YYYY\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Пример: {\"error\": \"cost calculation failed\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Расчет общей стоимости
      tags:
      - subscriptions
swagger: "2.0"
